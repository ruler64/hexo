{
    "version": "https://jsonfeed.org/version/1",
    "title": "Rulerの博客",
    "subtitle": "与天对弈，初心不改",
    "icon": "https://ruler64.github.io/hexo/images/favicon.ico",
    "description": "路漫漫其修远兮，吾将上下而求索",
    "home_page_url": "https://ruler64.github.io/hexo",
    "items": [
        {
            "id": "https://ruler64.github.io/hexo/slam%E6%96%B9%E5%90%91/",
            "url": "https://ruler64.github.io/hexo/slam%E6%96%B9%E5%90%91/",
            "title": "slam方向",
            "date_published": "2024-07-18T00:32:44.000Z",
            "content_html": "<div class=\"note info\">\n<p>slam 方向主要是作为机器人的地图构建与轨迹判断。利用相机的照片估计机器人距离物体的距离。</p>\n</div>\n<h1 id=\"旋转矩阵\"><a class=\"anchor\" href=\"#旋转矩阵\">#</a> 旋转矩阵</h1>\n<p>A=RA'</p>\n<p>A 为三维向量，R 为 3*3 的旋转矩阵。</p>\n<ul>\n<li>旋转矩阵为正交矩阵，他的逆与他的转置相等</li>\n<li>旋转矩阵的行列式为 + 1</li>\n</ul>\n<p>在 C++ 的 eigen 库中通过乘法 * 旋转某个向量</p>\n<h1 id=\"旋转向量角轴\"><a class=\"anchor\" href=\"#旋转向量角轴\">#</a> 旋转向量 / 角轴</h1>\n<ul>\n<li>除了旋转矩阵之外的旋转表示</li>\n<li>三维旋转：三自由度，用 R³ 向量表示。方向为旋转轴，长度为旋转过的角度</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span>jn（j为角度，n为单位方向向量，w为轴）</pre></td></tr></table></figure><p>角轴与旋转矩阵的不同：</p>\n<ul>\n<li>旋转矩阵：九个量，有正交性约束和行列式值约束</li>\n<li>角轴：三个量，没有约束</li>\n</ul>\n<p>角轴也就是<strong>李代数</strong>。</p>\n<p>转换关系：</p>\n<ul>\n<li>轴角（旋转向量）转旋转矩阵：罗德里格斯公式</li>\n<li>旋转矩阵转轴角：\n<ul>\n<li>角度：o=arccos ((tr (R)-1)/2)</li>\n<li>轴：Rn=n.</li>\n</ul>\n</li>\n</ul>\n<p>在 C++ 的 eigen 库中通过乘法 * 旋转某个向量</p>\n<h1 id=\"变换矩阵\"><a class=\"anchor\" href=\"#变换矩阵\">#</a> 变换矩阵</h1>\n<p>变换矩阵是为了将旋转（旋转矩阵）和平移可以放入同一个矩阵。</p>\n<p>将其写成 b=Ta</p>\n<p>在 C++ 的 eigen 库中通过乘法 * 变换某个向量（旋转 + 平移）</p>\n<h1 id=\"四元数\"><a class=\"anchor\" href=\"#四元数\">#</a> 四元数</h1>\n<p>四元数有三个虚部，可以表达三维空间中的旋转<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><msup><mi>q</mi><mn>0</mn></msup><mo>+</mo><msup><mi>q</mi><mn>1</mn></msup><mi>i</mi><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mi>j</mi><mo>+</mo><msup><mi>q</mi><mn>3</mn></msup><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">q=q^0+q^1i+q^2j+q^3k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></p>\n<p>虚部间的关系：i²=-1，ij=k，ji=-k，jk=i，kj=-i，ki=j，ik=-j</p>\n<p>四元数和角轴的关系</p>\n<ul>\n<li>角轴到四元数：</li>\n<li>四元数到角轴：</li>\n</ul>\n<p>类似可知四元数亦可转换为旋转矩阵、欧拉角（欧拉角将旋转分解为<strong>三次</strong>不同轴上的转动，以便理解）</p>\n<p>四元数相比与角轴、欧拉角的优势：紧凑、无奇异性。</p>\n<p>用四元数旋转一个空间点，即将其在三维空间的三个坐标分别赋值在四元数的三个虚部，实部为 0，则其成功变为用四元数表示的坐标</p>\n<p>在 C++ 的 eigen 库中通过乘法 * 旋转某个向量</p>\n<h1 id=\"李群与李代数\"><a class=\"anchor\" href=\"#李群与李代数\">#</a> 李群与李代数</h1>\n<ul>\n<li>三维世界中刚体运动的描述：<strong>旋转矩阵</strong>、<strong>旋转向量（角轴）</strong>、<strong>欧拉角</strong>、<strong>四元数</strong>。</li>\n<li>除了<strong>表示</strong>之外，我们还要对它们进行<strong>估计</strong>和<strong>优化</strong>。</li>\n<li>旋转矩阵自身带有<strong>约束</strong>（正交且行列式为 1），作为优化变量时会引入额外的约束，使优化变得困难。</li>\n<li>李代数上可以变成<strong>无约束</strong>优化。</li>\n</ul>\n<h2 id=\"李群李代数基础\"><a class=\"anchor\" href=\"#李群李代数基础\">#</a> 李群李代数基础</h2>\n<p 3x3=\"\">三维<strong>旋转</strong>矩阵构成了特殊正交<strong>群</strong> SO (3) R^</p>\n<p 4x4=\"\">三维<strong>变换</strong>矩阵构成了特殊欧式<strong>群</strong> SE (3) R^</p>\n<ul>\n<li><strong>群</strong>是一种集合加上一种运算的代数结构。</li>\n<li>记集合为 A，运算为.，那么当运算满足以下性质时，称（A，.）成群：</li>\n</ul>\n<ol>\n<li>封闭性</li>\n<li>结合律</li>\n<li>幺元</li>\n<li>逆</li>\n</ol>\n<p>李群（Lie Group）：</p>\n<ul>\n<li>具有连续（光滑）性质的群。</li>\n<li>既是群也是流形。</li>\n<li>直观上看，一个刚体能够连续地在空间中运动，故 SO (3) 和 SE (3) 都是李群。</li>\n<li>但是，旋转矩阵 SO (3) 和变换矩阵 SE (3) 只有定义良好的乘法，没有加法，所以难以进行取极限、求导等动作。</li>\n</ul>\n<p>李代数：与李群对应的一种结构，位于向量空间。</p>\n<ul>\n<li>通常记作小写的 so (3) 和 se (3)。</li>\n<li>事实上是李群单位元处的正切空间。</li>\n</ul>\n<p>李代数的引出：</p>\n<ul>\n<li>任意旋转矩阵 R，满足：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><msup><mi>R</mi><mi>T</mi></msup><mo>=</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">RR^T=I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span></li>\n</ul>\n<p><img data-src=\"34.png\" alt=\"\" /></p>\n<h2 id=\"李代数求导与扰动模型\"><a class=\"anchor\" href=\"#李代数求导与扰动模型\">#</a> 李代数求导与扰动模型</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy=\"false\">(</mo><msubsup><mi>ϕ</mi><mn>0</mn><mrow></mrow></msubsup><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(t)=exp(\\phi_0^{}t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.363em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>该式说明，对任意 t，都可以找到一个 R 和一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> 的对应关系</p>\n<ul>\n<li>该关系称为指数映射</li>\n<li>这里的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> 称为 SO (3) 对应的李代数：so (3)，并且 so (3) 的物理意义就是旋转向量</li>\n</ul>\n<p>李群经过<strong>对数</strong>映射变为李代数</p>\n<p>李代数经过<strong>指数</strong>映射变为李群</p>\n<p>对 R 对应的李代数加上小量，求相对于小量的变化率（导数模型）；</p>\n<p>对 R 左乘或右乘一个小量，求相对于小量的李代数的变化率（扰动模型）。</p>\n<h1 id=\"相机模型\"><a class=\"anchor\" href=\"#相机模型\">#</a> 相机模型</h1>\n<ul>\n<li>小孔成像模型</li>\n</ul>\n<p><img data-src=\"1.png\" alt=\"\" /></p>\n<p>原始形式：\\(\\frac Z f\\)=\\(\\frac {-X} {X'}\\)=\\(\\frac {-Y} {Y'}\\)</p>\n<p>翻转到前面：\\(\\frac Z f\\)=\\(\\frac {X} {X'}\\)=\\(\\frac {Y} {Y'}\\)</p>\n<p>整理之后：X'=f\\(\\frac X Z\\)   Y'=f\\(\\frac Y Z\\)</p>\n<ul>\n<li>成像平面下 X,Y,Z 到像素坐标 u，v</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>u</mi><mo>=</mo><mi>α</mi><msup><mi>X</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msub><mi>c</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>v</mi><mo>=</mo><mi>β</mi><msup><mi>Y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><msub><mi>c</mi><mi>y</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">\\begin {cases}\n  u =\\alpha X&#x27;+c_x\\\\\n  v =\\beta Y&#x27;+c_y\\\\\n\\end {cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> 与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> 分别表示 x 轴与 y 轴的缩放<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>y</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 表示 x 轴与 y 轴的平移</p>\n<p>可以进一步化简为：</p>\n<p><img data-src=\"2.png\" alt=\"\" /></p>\n<p><strong>当 Z=1 时为归一化平面坐标，当 Z 有确切的值时，为三维的 3D 坐标</strong></p>\n<p>我们称矩阵 K 为<strong>内参</strong>（相机出厂自带的参数），P 为相机坐标。</p>\n<p><img data-src=\"3.png\" alt=\"\" /></p>\n<p>从像素坐标到相机坐标再到世界坐标，实现了世界坐标到像素坐标的变换</p>\n<p><img data-src=\"4.png\" alt=\"\" /></p>\n<h2 id=\"双目模型\"><a class=\"anchor\" href=\"#双目模型\">#</a> 双目模型</h2>\n<p><img data-src=\"5.png\" alt=\"\" /></p>\n<h1 id=\"图像\"><a class=\"anchor\" href=\"#图像\">#</a> 图像</h1>\n<p><img data-src=\"6.png\" alt=\"\" /></p>\n<p>有彩图与深度图即可得到像素坐标 (u,v)，然后根据公式可得相机坐标 (X,Y,Z)，最后可以根据相机位恣（旋转 + 平移）即可推出世界坐标。</p>\n<h1 id=\"非线性优化\"><a class=\"anchor\" href=\"#非线性优化\">#</a> 非线性优化</h1>\n<h2 id=\"状态估计问题\"><a class=\"anchor\" href=\"#状态估计问题\">#</a> 状态估计问题</h2>\n<p><img data-src=\"7.png\" alt=\"\" /></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为运动方程的噪声。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mrow><mi>k</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">v_{k,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 为观测方程的噪声。</li>\n</ul>\n<p>历史上很长一段时间使用<strong>滤波器</strong>求解状态估计，但近些年<strong>非线性优化</strong>已成为主流。</p>\n<p><img data-src=\"8.png\" alt=\"\" /></p>\n<ul>\n<li><strong>先验分布</strong>：根据一般的经验认为随机变量应该满足的分布。<strong>先验分布是你瞎猜参数服从啥分布</strong>。</li>\n<li><strong>后验分布</strong>：通过当前训练数据修正的随机变量的分布，比先验分布更符合当前数据。<strong>后验分布是你学习经验后有根据地瞎猜参数服从啥分布</strong>。</li>\n<li><strong>似然估计</strong>：已知训练数据，给定了模型，通过让似然性极大化估计模型参数的一种方法。<strong>似然估计是你猜参数是多少，才最能解释某些实验结果</strong>。</li>\n</ul>\n<p><strong>后验概率</strong></p>\n<p>若老王花了一个小时的时间完成了 10 公里的距离，那么很大可能是骑车过去的，当然也有较小可能老王是个健身达人跑步过去的，或者开车过去但是堵车很严重。若老王一共用了两个小时的时间完成了 10 公里的距离，那么很有可能他是走路过去的。若老王只用了二十分钟，那么很有可能是开车。这种先知道结果，然后由结果估计原因的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlQTYlODIlRTclOEUlODclRTUlODglODYlRTUlQjglODMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">概率分布</span>，<em>p</em> (交通方式 | 时间)，就是<strong>后验概率</strong>。</p>\n<p><strong>先验概率</strong></p>\n<p>老王早上起床的时候觉得精神不错，想锻炼下身体，决定跑步过去；也可能老王想做个文艺青年试试最近流行的共享单车，决定骑车过去；也可能老王想炫个富，决定开车过去。老王的选择与到达目的地的时间无关。先于结果，确定原因的概率分布，<em>p</em> (交通方式)，就是<strong>先验概率</strong>。</p>\n<p><strong>似然函数</strong></p>\n<p>老王决定步行过去，那么很大可能 10 公里的距离大约需要两个小时；较小可能是老王平时坚持锻炼，跑步过去用了一个小时；更小可能是老王是个猛人，40 分钟就到了。老王决定骑车过去，很可能一个小时就能到；较小可能是老王那天精神不错加上单双号限行交通很通畅，40 分钟就到了；还有一种较小可能是老王运气很差，连着坏了好几辆共享单车，花了一个半小时才到。老王决定开车过去，很大可能是 20 分钟就到了，较小可能是那天堵车很严重，磨磨唧唧花了一个小时才到。这种先确定原因，根据原因来估计结果的概率分布，<em>p</em> (时间 | 交通方式)，就是<strong>似然估计</strong>。</p>\n<p><img data-src=\"9.png\" alt=\"\" /></p>\n<p><strong>从最大似然到最小二乘</strong></p>\n<p><img data-src=\"10.png\" alt=\"\" /></p>\n<p><img data-src=\"11.png\" alt=\"\" /></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>u</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x_{k-1},u_k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 为运动方程轨迹当前<strong>理论</strong>上的值，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为运动方程<strong>实际</strong>上的值</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>k</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x_k,y_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 为观测方程像素当前<strong>理论</strong>上的值，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mrow><mi>k</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">z_{k,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 为观测方程<strong>实际</strong>上的值</li>\n</ul>\n<p><img data-src=\"12.png\" alt=\"\" /></p>\n<p>当误差最小时，显然得出最大似然估计值。</p>\n<p>对于 J (x) 函数，有以下解释：</p>\n<ul>\n<li>直观解释\n<ul>\n<li>由于噪声的存在，当我们把估计的轨迹与地图代入 SLAM 的运动、观测方程中时，他们并不会完美成立。</li>\n<li>此时就调整状态的估计，使得误差最小化。</li>\n</ul>\n</li>\n<li>该问题有何结构？\n<ul>\n<li>由许多个误差的平方和组成。</li>\n<li>虽然总体维度高，但每个项很简单，只关联 2 个变量。</li>\n<li>如果用李代数表达位姿，那么是无约束优化问题。</li>\n</ul>\n</li>\n<li>如何求解？\n<ul>\n<li>下面先来介绍通用的<strong>非线性最小二乘</strong>问题。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"非线性最小二乘\"><a class=\"anchor\" href=\"#非线性最小二乘\">#</a> 非线性最小二乘</h2>\n<p><img data-src=\"13.png\" alt=\"\" /></p>\n<p><strong>迭代方式：</strong></p>\n<p><img data-src=\"14.png\" alt=\"\" /></p>\n<p><img data-src=\"15.png\" alt=\"\" /></p>\n<p>梯度：指函数<strong>增长</strong>的方向；增量方向取负梯度即为取函数下降方向</p>\n<p><img data-src=\"16.png\" alt=\"\" /></p>\n<ul>\n<li>最速下降法和牛顿法虽然直观，但实用当中存在一些缺点\n<ul>\n<li>最速下降法会碰到 zigzag 问题（过于贪婪），导致迭代次数多</li>\n<li>牛顿法迭代次数少，但需要计算复杂的<strong> Hessian</strong> 矩阵</li>\n</ul>\n</li>\n<li>能否回避 Hessian 的计算？\n<ul>\n<li><strong>Gauss-Newton</strong> 高斯牛顿</li>\n<li><strong>Levenberg-Marquadt</strong></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"17.png\" alt=\"\" /></p>\n<ul>\n<li><strong>Gauss-Newton</strong> 简单实用，但<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Δ</mi><msub><mi>x</mi><mi>k</mi></msub><mo>=</mo><msup><mi>H</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">\\varDelta x_k=H^{-1}g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathit\">Δ</span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> 当中无法保证 H 可逆（二次近似不可靠）</li>\n<li><strong>Levenberg-Marquadt</strong> 方法一定程度上改善了它\n<ul>\n<li><strong>G-N</strong> 属于线搜索方法：先找到方向，再确定长度</li>\n<li><strong>L-M</strong> 属于信赖区域方法（Trust Region），认为近似只在区域内可靠\n<ul>\n<li>考虑近似程度的描述\\rho=\\(\\frac {f(x+\\Delta x)-f(x)} {J(x)\\Delta x}\\)\t实际下降 / 近似下降</li>\n<li>若太小，即<strong>实际下降</strong> &lt;<strong> 近似下降</strong>，则认为不可靠，减小近似范围</li>\n<li>若太大，即<strong>实际下降</strong> &gt;<strong> 近似下降</strong>，则认为可靠，增加近似范围</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"18.png\" alt=\"\" /></p>\n<p><img data-src=\"19.png\" alt=\"\" /></p>\n<div class=\"note info\">\n<p>💡<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo>+</mo><mi>λ</mi><mi>I</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">(H+\\lambda I)\\Delta x=g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></p>\n<p><strong>LM</strong> 相比于<strong> GN</strong>，能够保证增量方程的正定性</p>\n<ul>\n<li>即认为近似只在一定范围内成立，如果近似不好则缩小范围</li>\n</ul>\n<p>从增量方程上来看，可以看成一阶和二阶的混合</p>\n<ul>\n<li>参数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> 控制着两边的权重</li>\n</ul>\n</div>\n<p><strong>小结</strong></p>\n<ul>\n<li>非线性优化的主要方法：最速下降、牛顿、<strong>G-N</strong>、<strong>L-M</strong>、<strong>DogLeg</strong> 等</li>\n<li>与线性规划不同，非线性需要针对具体问题具体分析</li>\n<li>问题非凸时，对初值敏感，会陷入局部最优\n<ul>\n<li>目前没有非凸问题的通用最优值的寻找办法</li>\n<li>问题凸时，二阶方法通常一两步就能收敛</li>\n</ul>\n</li>\n</ul>\n<p><strong>实践：CERES</strong></p>\n<ul>\n<li>实验：曲线拟合</li>\n<li>设曲线方程：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">y=exp(ax^2+bx+c)+w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span></li>\n<li>我们希望得到一些带噪声的样本数据：x，y</li>\n<li>希望拟合（回归）曲线参数：a，b，c</li>\n</ul>\n<p><strong>实践：G2O</strong></p>\n<p><img data-src=\"20.png\" alt=\"\" /></p>\n<h1 id=\"视觉里程计\"><a class=\"anchor\" href=\"#视觉里程计\">#</a> 视觉里程计</h1>\n<h2 id=\"特征点法\"><a class=\"anchor\" href=\"#特征点法\">#</a> 特征点法</h2>\n<p>在经典<strong> SLAM</strong> 模型中是以<strong>位姿</strong>和<strong>路标（Landmark）<strong>来描述</strong> SLAM</strong> 过程。</p>\n<p>路标是三维空间中固定不变的点，能够在特定位姿下观测到</p>\n<ul>\n<li>路标点数量充足，以实现良好的定位</li>\n<li>路标点具有较好的区分性，以实现数据关联</li>\n</ul>\n<p>在视觉<strong> SLAM</strong> 中，可利用图像<strong>特征点</strong>作为<strong> SLAM</strong> 中的路标</p>\n<p><img data-src=\"21.png\" alt=\"\" /></p>\n<p>特征点：图像中具有代表性的部分</p>\n<ul>\n<li>可重复性</li>\n<li>可区别性</li>\n<li>高效</li>\n<li>本地</li>\n</ul>\n<p>特征点的信息</p>\n<ul>\n<li>位置、大小、方向、评分等──关键点</li>\n<li>特征点周围的图像信息──描述子\n<ul>\n<li>例子：<strong>SIFT/SURF/ORB</strong>\t\t见<strong> OpenCV features2d 模块</strong></li>\n</ul>\n</li>\n</ul>\n<p>例子：<strong>ORB</strong> 特征</p>\n<ul>\n<li>关键点：<strong>Oriented FAST</strong></li>\n<li>描述：<strong>BRIEF</strong></li>\n</ul>\n<p><strong>FAST</strong></p>\n<ul>\n<li>连续 N 个点的灰度值大于中间点</li>\n<li><img data-src=\"22.png\" alt=\"\" /></li>\n</ul>\n<p><strong>Oriented FAST</strong></p>\n<ul>\n<li>在<strong> FAST</strong> 基础上计算旋转</li>\n</ul>\n<p><img data-src=\"23.png\" alt=\"\" /></p>\n<p>特征匹配</p>\n<ul>\n<li>通过描述子的差异判断哪些特征为同一个点\n<ul>\n<li>暴力匹配：比较图 1 中每个特征和图 2 特征的距离</li>\n<li>加速：快速最近邻（FLANN）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2d-2d对极几何\"><a class=\"anchor\" href=\"#2d-2d对极几何\">#</a> 2D-2D：对极几何</h2>\n<p>特征匹配之后，得到了特征点之间的对应关系</p>\n<p>如果只有两个单目图像，得到 2D-2D 间的关系──对极几何</p>\n<p>如果匹配的是帧和地图，得到 3D-2D 间的关系──PnP</p>\n<p>如果匹配的是 RGB-D 图，得到 3D-3D 间的关系──ICP</p>\n<p><img data-src=\"24.png\" alt=\"\" /></p>\n<p><img data-src=\"25.png\" alt=\"\" /></p>\n<p><img data-src=\"26.png\" alt=\"\" /></p>\n<p><img data-src=\"27.png\" alt=\"\" /></p>\n<p>八点法的讨论</p>\n<ul>\n<li>用于单目 SLAM 的初始化</li>\n<li>尺度不确定性，归一化 t 或特征点的平均深度</li>\n<li>纯旋转问题：t=0 时无法求解</li>\n<li>多于八对点时：最小二乘或 RANSAC</li>\n</ul>\n<p><img data-src=\"28.png\" alt=\"\" /></p>\n<p><img data-src=\"29.png\" alt=\"\" /></p>\n<p><strong>小结</strong></p>\n<p>2D-2D 情况下，只知道图像坐标之间的对应关系</p>\n<ul>\n<li>当特征点在平面上时（例如俯视或仰视），使用 H 恢复 R,t</li>\n<li>否则，实用 E 或 F 恢复 R,t</li>\n</ul>\n<p>求得 R,t 后：</p>\n<ul>\n<li>利用三角化计算特征点的 3D 位置（即深度）</li>\n</ul>\n<h2 id=\"三角化\"><a class=\"anchor\" href=\"#三角化\">#</a> 三角化</h2>\n<p><img data-src=\"30.png\" alt=\"\" /></p>\n<p><img data-src=\"31.png\" alt=\"\" /></p>\n<h2 id=\"3d-2dpnp\"><a class=\"anchor\" href=\"#3d-2dpnp\">#</a> 3D-2D：PNP</h2>\n<p>已知 3D 点的空间位置和相机上的投影点，求相机的旋转和平移（外参）</p>\n<p>代数的解法 / 优化的解法：</p>\n<ul>\n<li>代数的：DLT/P3P/EPnP/UPnP/……</li>\n<li>优化的：Bundle Adjustment</li>\n</ul>\n<p><img data-src=\"32.png\" alt=\"\" /></p>\n<p><img data-src=\"33.png\" alt=\"\" /></p>\n<p><strong>DLT</strong> 将 R,t 看成独立的未知量，忽略了 R 本身正交且行列式为 1 的性质，所以其结果不一定都符合，所以在求出结果后，需要将 t 组成的矩阵投影回 SO (3)（通常用 QR 分解实现）；此外也可代入内参矩阵 K，但 SLAM 中一般假设 K 已知，所以这里没有代入。</p>\n<h3 id=\"p3p\"><a class=\"anchor\" href=\"#p3p\">#</a> P3P</h3>\n<p><img data-src=\"35.png\" alt=\"\" /></p>\n<p><img data-src=\"36.png\" alt=\"\" /></p>\n<h3 id=\"bundle-adjustment\"><a class=\"anchor\" href=\"#bundle-adjustment\">#</a> Bundle Adjustment</h3>\n<hr />\n<p><img data-src=\"37.png\" alt=\"\" /></p>\n<p>已知 3D 点 P，但是由于相机的<strong>旋转和平移</strong>的初始值不是很好，即<strong>外参</strong>（李代数）存在一定的误差。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">P_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：本该投影到的位置；\\^{P_2}：实际投影到的位置；e：误差。尽量让误差最小化使得相机的<strong>旋转和平移</strong>达到一个比较<strong>优化</strong>的值。</p>\n<p>令误差为等式左右两边相减，问题在于如何去求误差关于相机位姿的导数，或者，按照哪个方向去优化相机的<strong>位姿</strong>（旋转 + 平移），即相机位姿发生变化时，误差会往哪个方向变？</p>\n<p><img data-src=\"38.png\" alt=\"\" /></p>\n<p><img data-src=\"39.png\" alt=\"\" /></p>\n<p>假如，此时不光相机位姿不知道，连 3D 点都不知道，也就是说 3D 点也是会变的，那么可以直接对 3D 点求导，去推误差关于 3D 点的变化。</p>\n<p><img data-src=\"40.png\" alt=\"\" /></p>\n<h2 id=\"3d-3dicp\"><a class=\"anchor\" href=\"#3d-3dicp\">#</a> 3D-3D：ICP</h2>\n<p><img data-src=\"41.png\" alt=\"\" /></p>\n<p><img data-src=\"42.png\" alt=\"\" /></p>\n<p><img data-src=\"43.png\" alt=\"\" /></p>\n<p><img data-src=\"44.png\" alt=\"\" /></p>\n<p>ICP 也可以从非线性优化角度求解，但：</p>\n<ul>\n<li>已知匹配时，ICP 问题存在唯一解或无穷多解的情况。在唯一解的情况下，只要能找到极小值解，那么这个<strong>极小值就是全局最优值</strong>。所以在正常情况下，SVD 结果和优化一样，且优化很快收敛。</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>在激光情况下，匹配点未知，将指点最近点为匹配点。此时问题非凸，极小值不一定为最小值。</li>\n<li>利用 ** 非线性优化（Bundle Adjustment 万金油）** 可以将 ICP 与 PnP 结合在一起求解。</li>\n</ul>\n<h2 id=\"直接法和光流\"><a class=\"anchor\" href=\"#直接法和光流\">#</a> 直接法和光流</h2>\n<p>回忆特征点法 VO 的做法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">做法</th>\n<th style=\"text-align:center\">耗时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">在图像中提取特征点并计算特征描述</td>\n<td style=\"text-align:center\">非常耗时，~10ms in ORB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">在不同图像中寻找特征匹配</td>\n<td style=\"text-align:center\">非常耗时，O (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">利用匹配点信息计算相机位姿</td>\n<td style=\"text-align:center\">比较快速，&lt;1ms</td>\n</tr>\n</tbody>\n</table>\n<p>能否不使用特征匹配计算 VO？</p>\n<p>不提特征计算 VO 的思路：</p>\n<ol>\n<li>通过其他方式寻找配对点\n<ul>\n<li>光流</li>\n</ul>\n</li>\n<li>无配对点\n<ul>\n<li>直接法</li>\n</ul>\n</li>\n</ol>\n<p>一般分为稀疏光流和稠密光流</p>\n<ul>\n<li>稀疏以 Lucas-Kanade（LK）光流为代表</li>\n<li>稠密以 Horn-Schunck（HS）光流为代表</li>\n<li>本质上是估计像素在不同时刻图像中的运动</li>\n</ul>\n<p><img data-src=\"45.png\" alt=\"\" /></p>\n<h3 id=\"lk光流\"><a class=\"anchor\" href=\"#lk光流\">#</a> LK 光流</h3>\n<p>设 t 时刻位于 x,y 处像素点的灰度值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">I(x,y,t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>在 t+dt 时刻，该像素运动到了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo>+</mo><mi>d</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">I(x+dx,y+dy,t+dt)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<ul>\n<li>希望计算运动 dx,dy</li>\n</ul>\n<p>灰度不变假设：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo>+</mo><mi>d</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>I</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">I(x+dx,y+dy,t+dt)=I(x,y,t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>注意：灰度不变是一种理想的假设，实际当中由于高光 / 阴影 / 材质 / 曝光等不同，很可能不成立。</p>\n<p><img data-src=\"46.png\" alt=\"\" /></p>\n<p><img data-src=\"47.png\" alt=\"\" /></p>\n<p><img data-src=\"48.png\" alt=\"\" /></p>\n<h3 id=\"直接法\"><a class=\"anchor\" href=\"#直接法\">#</a> 直接法</h3>\n<p><strong>光流</strong>仅估计了像素间的平移，但没有用到相机本身的几何结构，没有考虑到相机的旋转和图像的缩放；<strong>直接法</strong>则考虑了这些信息。</p>\n<p><img data-src=\"49.png\" alt=\"\" /></p>\n<p><img data-src=\"50.png\" alt=\"\" /></p>\n<p><img data-src=\"51.png\" alt=\"\" /></p>\n<p><img data-src=\"52.png\" alt=\"\" /></p>\n<p><img data-src=\"53.png\" alt=\"\" /></p>\n<h1 id=\"后端\"><a class=\"anchor\" href=\"#后端\">#</a> 后端</h1>\n<h2 id=\"ekf滤波器形式后端\"><a class=\"anchor\" href=\"#ekf滤波器形式后端\">#</a> EKF 滤波器形式后端</h2>\n<p>从带噪声的数据估计内在状态──状态估计问题</p>\n<ul>\n<li>渐进式（Incremental）\n<ul>\n<li>保持当前状态的估计，在加入新信息时，更新已有的估计（滤波）</li>\n</ul>\n</li>\n<li>批量式（Batch）\n<ul>\n<li>给定一定规模的数据，计算该数据下的最优估计（优化）</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"54.png\" alt=\"\" /></p>\n<p><img data-src=\"55.png\" alt=\"\" /></p>\n<p><img data-src=\"56.png\" alt=\"\" /></p>\n<p><img data-src=\"57.png\" alt=\"\" /></p>\n<p><img data-src=\"58.png\" alt=\"\" /></p>\n<p><img data-src=\"59.png\" alt=\"\" /></p>\n<p><img data-src=\"60.png\" alt=\"\" /></p>\n<p><img data-src=\"61.png\" alt=\"\" /></p>\n<p><img data-src=\"62.png\" alt=\"\" /></p>\n<p><img data-src=\"63.png\" alt=\"\" /></p>\n<p><img data-src=\"64.png\" alt=\"\" /></p>\n<p><img data-src=\"65.png\" alt=\"\" /></p>\n<p><img data-src=\"66.png\" alt=\"\" /></p>\n<p>EKF</p>\n<ul>\n<li>优点：\n<ul>\n<li>推导简单清楚，适用各种传感器形式</li>\n<li>易于做多传感器融合</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>一阶马尔可夫性过于简单</li>\n<li>可能会发散（要求数据不能有 outlier）</li>\n<li>线性化误差</li>\n<li>需要存储所有状态量的均值和方差，平方增长</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ba与图优化\"><a class=\"anchor\" href=\"#ba与图优化\">#</a> BA 与图优化</h2>\n<p><img data-src=\"67.png\" alt=\"\" /></p>\n<p>BA 问题与图结构的关系</p>\n<ul>\n<li>BA 虽然是个纯优化问题，但亦可以用图模型清晰地表述出来</li>\n<li>顶点为优化变量，边为运动 / 观测约束</li>\n<li>本身还有一些特殊的结构</li>\n</ul>\n<p>考虑在位姿 i 处对路标 j 的一次观测<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">z_{ij}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>z</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>−</mo><mi>h</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e_{ij}=z_{ij}-h(x_i,y_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8694379999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>每个观测只关系两个变量，其中一个是相机<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，一个是路标<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>纯视觉 BA 中，不存在相机与相机 / 路标与路标之间的关联</li>\n<li>整个误差函数由许多个这样小的项组成</li>\n</ul>\n<p><img data-src=\"68.png\" alt=\"\" /></p>\n<p><img data-src=\"69.png\" alt=\"\" /></p>\n<p><img data-src=\"70.png\" alt=\"\" /></p>\n<p><img data-src=\"71.png\" alt=\"\" /></p>\n<p><img data-src=\"72.png\" alt=\"\" /></p>\n<p><img data-src=\"73.png\" alt=\"\" /></p>\n<p><img data-src=\"74.png\" alt=\"\" /></p>\n<p><img data-src=\"75.png\" alt=\"\" /></p>\n",
            "tags": [
                "笔记",
                "视觉设计,slam"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF/",
            "url": "https://ruler64.github.io/hexo/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF/",
            "title": "Redis的Java客户端",
            "date_published": "2024-07-05T09:32:44.000Z",
            "content_html": "<div class=\"note info\">\n<p>Spring Data Redis 集成了 Jedis 与 lettuce，但有些企业仍在使用 Jedis 而没有用 Spring Data Redis</p>\n<ul>\n<li>Jedis：以 Redis 命令作为方法名称，学习成本低，简单实用。但是 Jedis 实例是线程不安全的，多线程环境下需要基于连接池来使用</li>\n<li>Lettuce：Lettuce 是基于 Netty 实现的，支持同步、异步和响应式编程方式，并且是线程安全的。支持 Redis 的哨兵模式、集群模式和管道模式。</li>\n</ul>\n</div>\n<h1 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> Jedis</h1>\n<p><span class=\"red\">Jedis 使用的基本步骤：</span></p>\n<ol>\n<li>引入依赖</li>\n<li>创建 Jedis 对象，建立连接</li>\n<li>使用 Jedis，方法名与 Redis 命令一致</li>\n<li>释放资源</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 引入依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>redis<span class=\"token punctuation\">.</span>clients<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>jedis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.7</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 建立连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 建立连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.150.101\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 设置密码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 选择库</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//3. 测试 string</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 插入数据，方法名称就是 redis 命令名称，非常简单</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 获取数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//4. 释放资源</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jedis连接池\"><a class=\"anchor\" href=\"#jedis连接池\">#</a> Jedis 连接池</h2>\n<div class=\"note info\">\n<p>Jedis 本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此推荐使用 Jedis 连接池代替 Jedis 的直连方式。</p>\n</div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisConnectionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> jedisPoolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 最大连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 最大空闲连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 最小空闲连接</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置最长等待时间， ms</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>jedisPoolConfig<span class=\"token punctuation\">,</span><span class=\"token string\">\"192.168.31.128\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取 Jedis 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"springdataredis\"><a class=\"anchor\" href=\"#springdataredis\">#</a> SpringDataRedis</h1>\n<div class=\"note info\">\n<p><strong>SpringData</strong> 是<strong> Spring</strong> 中数据操作的模块，包含对各种数据库的集成，其中对<strong> Redis</strong> 的集成模块就叫做<strong> SpringDataRedis</strong>，官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtcmVkaXM=\">https://spring.io/projects/spring-data-redis</span></p>\n<p>小提示💡：</p>\n<p>RedisTemplate 的两种序列化实践方案：</p>\n<p>方案一：</p>\n<p>1. 自定义 RedisTemplate</p>\n<p>2. 修改 RedisTemplate 的序列化器为 GenericJackson2JsonRedisSerializer</p>\n<p>* 方案二：</p>\n<p>1. 使用 StringRedisTemplate</p>\n<p>2. 写入 Redis 时，手动把对象序列化为 JSON</p>\n<p>读取 Redis 时，手动把读取到的 JSON 反序列化为对象</p>\n</div>\n<ul>\n<li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li>\n<li>提供了 RedisTemplate 统一 API 来操作 Redis</li>\n<li>支持 Redis 的发布订阅模型</li>\n<li>支持 Redis 哨兵和 Redis 集群</li>\n<li>支持基于 Lettuce 的响应式编程</li>\n<li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列化及反序列化</li>\n<li>支持基于 Redis 的 JDKCollection 实现</li>\n</ul>\n<p><strong>SpringDataRedis</strong> 中提供了<strong> RedisTemplate</strong> 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作 API 封装到了不同的类型中：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">返回值类型</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong>.opsForValue()</td>\n<td style=\"text-align:center\">ValueOperations</td>\n<td style=\"text-align:center\">操作<strong> String</strong> 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong>.opsForHash()</td>\n<td style=\"text-align:center\">HashOperations</td>\n<td style=\"text-align:center\">操作<strong> Hash</strong> 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong>.opsForList()</td>\n<td style=\"text-align:center\">ListOperations</td>\n<td style=\"text-align:center\">操作<strong> List</strong> 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong>.opsForSet()</td>\n<td style=\"text-align:center\">SetOperations</td>\n<td style=\"text-align:center\">操作<strong> Set</strong> 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong>.opsForZSet()</td>\n<td style=\"text-align:center\">ZSetOperations</td>\n<td style=\"text-align:center\">操作<strong> SortedSet</strong> 类型数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>redisTemplate</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">通用的命令</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"red\">SpringDataRedis 的使用步骤：</span></p>\n<ol>\n<li>引入 spring-boot-starter-data-redis 依赖</li>\n<li>在 application.yml 配置 Redis 信息</li>\n<li>注入 RedisTemplate</li>\n</ol>\n<p>1. 引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token class-name\">Redis</span>依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>redis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>连接池依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>commons<span class=\"token operator\">-</span>pool2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>2. 配置文件</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.31.128 <span class=\"token comment\"># 虚拟机地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token comment\"># 最大连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span> <span class=\"token comment\"># 最大空闲连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 最小空闲连接</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 连接等待时间</span></pre></td></tr></table></figure><p>3. 注入 RedisTemplate</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 编写测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 插入一条 string 类型数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 读取一条 string 类型数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"springdataredis的序列化方式\"><a class=\"anchor\" href=\"#springdataredis的序列化方式\">#</a> SpringDataRedis 的序列化方式</h2>\n<p>RedisTemplate 可以接收任意 Object 作为值写入 Redis，只不过写入前会把 Object 序列化为字节形式，默认是采用 JDK 序列化，得到的结果是这样的： <code>\\AC\\XED</code></p>\n<p>缺点：</p>\n<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n<p><span class=\"red\">我们可以自定义 RedisTemplate 的序列化方式，代码如下：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建 Template</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置连接工厂</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置序列化工具</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//key 和 hashKey 采用 string 序列化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//value 和 hashValue 采用 JSON 序列化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>尽管 JSON 的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p>\n<p><img data-src=\"1.png\" alt=\"\" /></p>\n<p>为了在反序列化时知道对象的类型，JSON 序列化器会将类的 class 类型写入 json 结果中，存入 Redis，会带来额外的内存开销。所以产生了使用<strong> StringRedisTemplate</strong> 这种解决办法</p>\n<h2 id=\"stringredistemplate\"><a class=\"anchor\" href=\"#stringredistemplate\">#</a> *StringRedisTemplate</h2>\n<p>为了节省内存空间，我们并不会使用 JSON 序列化器来处理 value，而是统一使用 String 序列化器，要求只能存储 String 类型的 key 和 value。当需要存储 Java 对象时，<strong>手动完成</strong>对象的序列化和反序列化。</p>\n<p><img data-src=\"2.png\" alt=\"\" /></p>\n<p>Spring 默认提供了一个<strong> StringRedisTemplate</strong> 类，它的 key 和 value 的序列化方式默认就是 String 方式。省去了我们自定义 RedisTemplate 的过程：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// JSON 工具</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testStringTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 准备对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"虎哥\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 手动序列化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 写入一条数据到 redis</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:200\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> val <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:200\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 反序列化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 = \"</span> <span class=\"token operator\">+</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "后端,Redis的Java客户端"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/Redis%E5%91%BD%E4%BB%A4/",
            "url": "https://ruler64.github.io/hexo/Redis%E5%91%BD%E4%BB%A4/",
            "title": "Redis命令",
            "date_published": "2024-07-03T00:32:44.000Z",
            "content_html": "<div class=\"note info\">\n<p>Redis 的命令，可以在 redis-cli 下通过 <code>help [命令名称]</code>  来查看一个命令的具体用法。</p>\n</div>\n<h1 id=\"redis的通用命令\"><a class=\"anchor\" href=\"#redis的通用命令\">#</a> Redis 的通用命令</h1>\n<p>通用命令是部分数据类型的，都可以使用的命令，常见的有：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>KEYS: 查看符合模板的所有key，不建议在生产设备上使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DEL: 删除一个指定的key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>EXISTS: 判断key是否存在</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EXPIRE: 给一个key设置有效期，到期自动删除该key</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TTL: 查看一个key的剩余有效期</pre></td></tr></table></figure><h1 id=\"redis命令-string类型\"><a class=\"anchor\" href=\"#redis命令-string类型\">#</a> Redis 命令 - String 类型</h1>\n<div class=\"note info\">\n<p>Sting 类型，也就是字符串类型，在 Redis 中可分为 3 类：</p>\n<ul>\n<li>String：普通字符串</li>\n<li>int：整数类型，可以自增 / 自减</li>\n<li>float：浮点类型，可以自增 / 自减</li>\n</ul>\n<p>不管哪种格式，底层都是字节数组形式存储，不过是编码方式不同，字符串类型的最大空间不能超过 512M</p>\n</div>\n<p>String 的常见命令有：</p>\n<ul>\n<li>SET：<strong>添加</strong>或者<strong>修改</strong>已经存在的一个 String 类型的键值对 <code>SET name Jack</code></li>\n<li>GET：根据 key 获取 String 类型的 value <code>GET name</code></li>\n<li>MSET：批量添加多个 String 类型的键值对 <code>MSET k1 v1 k2 v2</code></li>\n<li>MGET：根据多个 key 获取多个 String 类型的 value <code>MGET k1 k2</code></li>\n<li>INCR：让一个整型的 key 自增 1 <code>INCR age</code>\n<ul>\n<li>INCRBY: 让一个整型的 key 自增并<strong>指定步长</strong>，例如：incrby num 2 让 num 值自增 2 <code>INCRBY age 2</code></li>\n</ul>\n</li>\n<li>INCRBYFLOAT：让一个浮点类型的数字自增并<strong>指定步长</strong> <code>INCRBYFLOAT score 0.5</code></li>\n<li>SETNX：添加一个 String 类型的键值对，前提是这个 key 不存在，否则不执行 <code>SETNX name lisi//或者set name lisi nx</code></li>\n<li>SETEX：添加一个 String 类型的键值对，并且指定有效期 <code>SETEX name 10 Jack//或者set name lisi ex 10</code></li>\n</ul>\n<h1 id=\"redis命令-key的层级格式\"><a class=\"anchor\" href=\"#redis命令-key的层级格式\">#</a> Redis 命令 - Key 的层级格式</h1>\n<p>Redis 的 key 允许有多个单词形成层级结构，多个单词之间用 ':' 隔开，格式如： <code>项目名:业务名:类型:id</code></p>\n<p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p>\n<p>例如我们的项目名称叫 heima，有 user 和 product 两种不同类型的数据，我们可以这样定义 key：</p>\n<ul>\n<li>uuser 相关的 key：heima:user:1</li>\n<li>uproduct 相关的 key：heima:product:1</li>\n</ul>\n<p>如果 Value 是一个 Java 对象，例如一个 User 对象，则可以将对象序列化为 JSON 字符串后存储：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202407031842233.png\" alt=\"\" /></p>\n<h1 id=\"redis命令-hash类型\"><a class=\"anchor\" href=\"#redis命令-hash类型\">#</a> Redis 命令 - Hash 类型</h1>\n<div class=\"note info\">\n<p>Hash 类型，也叫散列，其 value 是一个无序字典，类似于 Java 中的 HashMap 结构。</p>\n<p>Hash 类型的常见命令，只是相较于 String 类型的常见命令前加 <code>H</code></p>\n</div>\n<p>String 结构是将对象序列化为 JSON 字符串后存储，当需要修改对象某个字段时很不方便：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202407041815144.webp\" alt=\"\" /></p>\n<p>Hash 结构可以将对象中的每个字段独立存储，可以针对单个字段做 CRUD：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202407041818987.webp\" alt=\"\" /></p>\n<h2 id=\"hash类型的常见命令\"><a class=\"anchor\" href=\"#hash类型的常见命令\">#</a> Hash 类型的常见命令</h2>\n<ul>\n<li>HSET key field value：<strong>添加</strong>或者<strong>修改</strong> hash 类型 key 的 field 的值 <code>HSET heima:user:3 name Lucy</code></li>\n<li>HGET key field：获取一个 hash 类型 key 的 field 的值 <code>HGET heima:user:3 name</code></li>\n<li>HMSET：批量添加多个 hash 类型 key 的 field 的值 <code>HMSET heima:user:4 name LiLei age 20 sex man</code></li>\n<li>HMGET：批量获取多个 hash 类型 key 的 field 的值 <code>HMGET heima:user:4 name age sex</code></li>\n<li>HGETALL：获取一个 hash 类型的 key 中的所有的 field 和 value <code>HGETALL heima:user:4</code></li>\n<li>HKEYS：获取一个 hash 类型的 key 中的所有的 field <code>HKEYS heima:user:4</code></li>\n<li>HVALS：获取一个 hash 类型的 key 中的所有的 value <code>HVALS heima:user:4</code></li>\n<li>HINCRBY: 让一个 hash 类型 key 的字段值自增（指定负数即为自减）并指定步长 <code>HINCRBY heima:user:4 age 2</code></li>\n<li>HSETNX：添加一个 hash 类型的 key 的 field 值，前提是这个 field 不存在，否则不执行 <code>HSETNX heima:user:4 sex woman</code>  由于已经有 sex 字段，则返回 0 失败</li>\n</ul>\n<h1 id=\"redis命令-list类型\"><a class=\"anchor\" href=\"#redis命令-list类型\">#</a> Redis 命令 - List 类型</h1>\n<div class=\"note info\">\n<p>Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个<strong>双向链表</strong>结构。既可以支持正向检索和也可以支持反向检索。特征也与 LinkedList 类似：</p>\n<ul>\n<li>有序</li>\n<li>元素可以重复</li>\n<li>插入和删除快</li>\n<li>查询速度一般</li>\n</ul>\n<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>\n</div>\n<p><span class=\"red\">List 的常见命令：</span></p>\n<ul>\n<li><strong>L</strong>PUSH key element ... ：向列表<strong>左侧</strong>插入一个或多个元素 (头插法) <code>LPUSH users 1 2</code></li>\n<li>LPOP key [count]：移除并<strong>返回</strong>列表左侧的第一个元素，没有则返回 nil <code>LPOP users 1</code></li>\n<li><strong>R</strong>PUSH key element ... ：向列表<strong>右侧</strong>插入一个或多个元素 (尾插法) <code>LPUSH users 3 4</code></li>\n<li>RPOP key [count]：移除并<strong>返回</strong>列表右侧的第一个元素 <code>RPOP users 1</code></li>\n<li>LRANGE key star end：返回一段<strong>角标范围</strong>内的所有元素 <code>LRANGE users 1 2</code></li>\n<li>BLPOP 和 BRPOP：与 LPOP 和 RPOP 类似，只不过在没有元素时等待指定时间，而不是直接返回 nil (阻塞模式) <code>BLPOP users2 [timeout]</code></li>\n</ul>\n<h1 id=\"redis命令-set类型\"><a class=\"anchor\" href=\"#redis命令-set类型\">#</a> Redis 命令 - Set 类型</h1>\n<div class=\"note info\">\n<p>Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 value 为 null 的 HashMap。因为也是一个 hash 表，因此具备与 HashSet 类似的特征：</p>\n<ul>\n<li>无序</li>\n<li>元素不可重复</li>\n<li>查找快</li>\n<li>支持交集、并集、差集等功能</li>\n</ul>\n</div>\n<p><span class=\"red\">Set 的常见命令：</span></p>\n<ul>\n<li>SADD key member ... ：向 set 中添加一个或多个元素 <code>SADD s1 a b c</code></li>\n<li>SREM key member ... : 移除 set 中的指定元素 <code>SREM s1 a</code></li>\n<li>SCARD key： 返回 set 中元素的个数 <code>SCARD s1</code></li>\n<li>SISMEMBER key member：判断一个元素是否存在于 set 中 <code>SISMEMBER s1 a</code></li>\n<li>SMEMBERS：获取 set 中的所有元素 <code>SMEMBERS s1</code></li>\n<li>SINTER key1 key2 ... ：求 key1 与 key2 的交集</li>\n<li>SDIFF key1 key2 ... ：求 key1 与 key2 的差集</li>\n<li>SUNION key1 key2 ..：求 key1 和 key2 的并集</li>\n</ul>\n<h1 id=\"redis命令-sortedset类型\"><a class=\"anchor\" href=\"#redis命令-sortedset类型\">#</a> Redis 命令 - SortedSet 类型</h1>\n<div class=\"note info\">\n<p>Redis 的 SortedSet 是一个可排序的 set 集合，与 Java 中的 TreeSet 有些类似，但底层数据结构却差别很大。SortedSet 中的每一个元素都带有一个 score 属性，可以基于 score 属性对元素排序，底层的实现是一个跳表（SkipList）加 hash 表。</p>\n<p>SortedSet 具备下列特性：</p>\n<ul>\n<li>可排序</li>\n<li>元素不重复</li>\n<li>查询速度快</li>\n</ul>\n<p>因为 SortedSet 的可排序特性，经常被用来实现排行榜这样的功能。</p>\n</div>\n<p><span class=\"red\">SortedSet 的常见命令：</span></p>\n<ul>\n<li>ZADD key score member：添加<strong>一个</strong>或<strong>多个</strong>元素到 sorted set ，如果已经存在则更新其 score 值 <code>ZADD stus 85 Jack 89 Lucy 82 Rose 95 Tom</code></li>\n<li>ZREM key member：删除 sorted set 中的一个指定元素 <code>ZREM stus Lucy</code></li>\n<li>ZSCORE key member : 获取 sorted set 中的指定元素的 score 值 <code>ZSCORE stus Jack</code></li>\n<li>ZRANK key member：获取 sorted set 中的指定元素的<strong>排名 (从 0 开始)</strong> <code>ZRANK stus Rose</code></li>\n<li>ZCARD key：获取 sorted set 中的元素个数 <code>ZCARD stus</code></li>\n<li>ZCOUNT key min max：统计 score 值在给定范围内的所有元素的个数 <code>ZCOUNT stus 0 80</code></li>\n<li>ZINCRBY key increment member：让 sorted set 中的指定元素自增，步长为指定的 increment 值 <code>ZINCRBY stus 2 Jack</code></li>\n<li>ZRANGE key min max：按照 score 排序后，获取指定排名范围内的元素 <code>ZRANGE stus 0 2</code></li>\n<li>ZRANGEBYSCORE key min max：按照 score 排序后，获取指定 score 范围内的元素 <code>ZRANGEBYSCORE stus 0 80</code></li>\n<li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li>\n</ul>\n<p>注意：所有的排名默认都是<span class=\"red\">升序</span>，如果要降序则在命令的 <code>Z</code>  后面添加 <code>REV</code>  即可</p>\n",
            "tags": [
                "笔记",
                "后端,Redis"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/Docker%E5%AD%A6%E4%B9%A0/",
            "url": "https://ruler64.github.io/hexo/Docker%E5%AD%A6%E4%B9%A0/",
            "title": "Docker的学习",
            "date_published": "2024-04-08T11:32:44.000Z",
            "content_html": "<h1 id=\"快速入门\"><a class=\"anchor\" href=\"#快速入门\">#</a> 快速入门</h1>\n<h3 id=\"部署mysql\"><a class=\"anchor\" href=\"#部署mysql\">#</a> 部署 MySQL</h3>\n<p>首先，利用 Docker 来安装一个 MySQL 软件。使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run <span class=\"token operator\">-</span>d \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">--</span>name mysql \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">-</span>p 3306:3306 \\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">-</span>e TZ=Asia/Shanghai \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span>e MYSQL_ROOT_PASSWORD=123 \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  mysql</pre></td></tr></table></figure><p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL</p>\n<div class=\"note primary\">\n<p>Docker 安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。</p>\n</div>\n<p>Docker 会根据命令中的镜像名称自动搜索并下载镜像，Docker 官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker 官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了 Docker 镜像交流的社区：</p>\n<p><div class=\"links\"><div class=\"item\" title=\"Docker\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\" data-background-image=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/avater.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">hub.docker.com</span>\n          <p class=\"desc\">Docker镜像交流社区</p>\n          </div></div></div></p>\n<p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p>\n<p>像这种提供存储、管理 Docker 镜像的服务器，被称为 DockerRegistry，可以翻译为镜像仓库。DockerHub 网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p>\n<p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p>\n<p>总之，镜像的来源有两种：</p>\n<ul>\n<li>基于官方基础镜像自己制作</li>\n<li>直接去 DockerRegistry 下载</li>\n</ul>\n<h3 id=\"命令解读\"><a class=\"anchor\" href=\"#命令解读\">#</a> 命令解读</h3>\n<p>利用 Docker 快速的安装了 MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run <span class=\"token operator\">-</span>d \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">--</span>name mysql \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">-</span>p 3306:3306 \\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">-</span>e TZ=Asia/Shanghai \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span>e MYSQL_ROOT_PASSWORD=123 \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  mysql</pre></td></tr></table></figure><p>解读：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404071611385.png\" alt=\"\" /></p>\n<ul>\n<li><code>docker run -d</code>  ：创建并运行一个容器， <code>-d</code>  则是让容器以后台进程运行</li>\n<li><code>--name mysql </code>  : 给容器起个名字叫 <code>mysql</code> ，你可以叫别的</li>\n<li><code>-p 3306:3306</code>  : 设置端口映射。\n<ul>\n<li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li>\n<li>容器内端口往往是由容器内的进程决定，例如 MySQL 进程默认端口是 3306，因此容器内端口一定是 3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li>\n<li>格式：  <code>-p 宿主机端口:容器内端口</code> ，示例中就是将宿主机的 3306 映射到容器内的 3306 端口</li>\n</ul>\n</li>\n<li><code>-e TZ=Asia/Shanghai</code>  : 配置容器内进程运行时的一些参数\n<ul>\n<li>格式： <code>-e KEY=VALUE</code> ，KEY 和 VALUE 都由容器内进程决定</li>\n<li>案例中， <code>TZ=Asia/Shanghai</code>  是设置时区； <code>MYSQL_ROOT_PASSWORD=123</code>  是设置 MySQL 默认密码</li>\n</ul>\n</li>\n<li><code>mysql</code>  : 设置<strong>镜像</strong>名称，Docker 会根据这个名字搜索并下载镜像\n<ul>\n<li>格式： <code>REPOSITORY:TAG</code> ，例如 <code>mysql:8.0</code> ，其中 <code>REPOSITORY</code>  可以理解为镜像名， <code>TAG</code>  是版本号</li>\n<li>在未指定 <code>TAG</code>  的情况下，默认是最新版本，也就是 <code>mysql:latest</code></li>\n</ul>\n</li>\n</ul>\n<p>镜像的名称不是随意的，而是要到 DockerRegistry 中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在 DockerHub 网站或者软件的官方网站中都能找到。</p>\n<h1 id=\"docker基础\"><a class=\"anchor\" href=\"#docker基础\">#</a> Docker 基础</h1>\n<h3 id=\"常见命令\"><a class=\"anchor\" href=\"#常见命令\">#</a> 常见命令</h3>\n<p>可以参考官方文档：</p>\n<p><div class=\"links\"><div class=\"item\" title=\"Docker\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9jbGkv\" data-background-image=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/avater.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9jbGkv\">Use the Docker command line</span>\n          <p class=\"desc\">Docker's CLI command description and usage</p>\n          </div></div></div></p>\n<h4 id=\"命令介绍\"><a class=\"anchor\" href=\"#命令介绍\">#</a> 命令介绍</h4>\n<p>其中，比较常见的命令有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>命令</strong></th>\n<th style=\"text-align:center\"><strong>说明</strong></th>\n<th style=\"text-align:center\"><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">docker pull</td>\n<td style=\"text-align:center\">拉取镜像</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wdWxsLw==\">docker pull</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker push</td>\n<td style=\"text-align:center\">推送镜像到 DockerRegistry</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wdXNoLw==\">docker push</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker images</td>\n<td style=\"text-align:center\">查看本地镜像</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbWFnZXMv\">docker images</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rmi</td>\n<td style=\"text-align:center\">删除本地镜像</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ybWkv\">docker rmi</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker run</td>\n<td style=\"text-align:center\">创建并运行容器（不能重复创建）</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ydW4v\">docker run</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker stop</td>\n<td style=\"text-align:center\">停止指定容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zdG9wLw==\">docker stop</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker start</td>\n<td style=\"text-align:center\">启动指定容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zdGFydC8=\">docker start</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker restart</td>\n<td style=\"text-align:center\">重新启动容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9yZXN0YXJ0Lw==\">docker restart</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rm</td>\n<td style=\"text-align:center\">删除指定容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ybS8=\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker ps</td>\n<td style=\"text-align:center\">查看容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9wcy8=\">docker ps</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker logs</td>\n<td style=\"text-align:center\">查看容器运行日志</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9sb2dzLw==\">docker logs</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker exec</td>\n<td style=\"text-align:center\">进入容器</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9leGVjLw==\">docker exec</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker save</td>\n<td style=\"text-align:center\">保存镜像到本地压缩文件</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9zYXZlLw==\">docker save</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker load</td>\n<td style=\"text-align:center\">加载本地压缩文件到镜像</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9sb2FkLw==\">docker load</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker inspect</td>\n<td style=\"text-align:center\">查看容器详细信息</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbnNwZWN0Lw==\">docker inspect</span></td>\n</tr>\n</tbody>\n</table>\n<p>用一副图来表示这些命令的关系：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404071122855.png\" alt=\"\" /></p>\n<p>补充：</p>\n<p>默认情况下，每次重启虚拟机我们都需要手动启动 Docker 和 Docker 中的容器。通过命令可以实现开机自启：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Docker 开机自启</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl enable docker</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Docker 容器开机自启</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker update <span class=\"token operator\">--</span>restart=always <span class=\"token punctuation\">[</span>容器名<span class=\"token operator\">/</span>容器id<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"演示\"><a class=\"anchor\" href=\"#演示\">#</a> 演示</h4>\n<p>以 Nginx 为例演示上述命令。</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第 1 步，去 DockerHub 查看 nginx 镜像仓库及相关信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第 2 步，拉取 Nginx 镜像</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker pull nginx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 第 3 步，查看镜像</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>docker images</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 结果如下：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nginx        latest    605c77e624dd   16 months ago   141MB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mysql        latest    3218b38490ce   17 months ago   516MB</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 第 4 步，创建并允许 Nginx 容器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">--</span>name nginx <span class=\"token operator\">-</span>p 80:80 nginx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 第 5 步，查看运行中容器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>docker <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 也可以加格式化方式访问，格式会更加清爽</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&lt;<span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼2-<span class=\"token operator\">-</span>></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 第 6 步，访问网页，地址：http:// 虚拟机地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 第 7 步，停止容器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>docker stop nginx</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 第 8 步，查看所有容器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&lt;<span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼3-<span class=\"token operator\">-</span>></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 第 9 步，再次启动 nginx 容器</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>docker <span class=\"token function\">start</span> nginx</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 第 10 步，再次查看容器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>&lt;<span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼4-<span class=\"token operator\">-</span>></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 第 11 步，查看容器详细信息</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>docker inspect nginx</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 第 12 步，进入容器，查看容器内目录</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>docker exec <span class=\"token operator\">-</span>it nginx bash</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 或者，可以进入 MySQL</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>docker exec <span class=\"token operator\">-</span>it mysql mysql <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 第 13 步，删除容器</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>docker <span class=\"token function\">rm</span> nginx</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 发现无法删除，因为容器运行中，强制删除容器</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>docker <span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f nginx</pre></td></tr></table></figure><h4 id=\"命令别名\"><a class=\"anchor\" href=\"#命令别名\">#</a> 命令别名</h4>\n<p>下面是一些常用的 vim 命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#进入编辑模式： i （在当前位置插入，开始编辑）；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#保存编辑文本： :w (英文冒号，保存当前编辑的文件）；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#退出编辑文件： :q（英文冒号，退出当前编辑的文件）；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#保存并退出： :wq （英文冒号，保存并退出当前编辑的文件）；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#强制退出：    :q! （英文冒号，强制退出不保存）。</span></pre></td></tr></table></figure><p>给常用 Docker 命令起别名，方便我们访问：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 修改 /root/.bashrc 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vi <span class=\"token operator\">/</span>root/<span class=\"token punctuation\">.</span>bashrc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>内容如下：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># .bashrc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># User specific aliases and functions</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>alias <span class=\"token function\">rm</span>=<span class=\"token string\">'rm -i'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>alias <span class=\"token function\">cp</span>=<span class=\"token string\">'cp -i'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>alias <span class=\"token function\">mv</span>=<span class=\"token string\">'mv -i'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&lt;<span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼5-<span class=\"token operator\">-</span>></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>alias dis=<span class=\"token string\">'docker images'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Source global definitions</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>etc/bashrc <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span>etc/bashrc</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fi</pre></td></tr></table></figure><p>然后，执行命令使别名生效</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>source <span class=\"token operator\">/</span>root/<span class=\"token punctuation\">.</span>bashrc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#或者 source ~/.bashrc</span></pre></td></tr></table></figure><h3 id=\"数据卷\"><a class=\"anchor\" href=\"#数据卷\">#</a> 数据卷</h3>\n<p>容器是隔离环境；容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。那么就产生了几个问题：</p>\n<ul>\n<li>如果要升级 MySQL 版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>\n<li>MySQL、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li>\n<li>我想要让 Nginx 代理我的静态资源怎么办？</li>\n</ul>\n<p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p>\n<h4 id=\"什么是数据卷\"><a class=\"anchor\" href=\"#什么是数据卷\">#</a> 什么是数据卷</h4>\n<p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。</p>\n<p>以 Nginx 为例，我们知道 Nginx 中有两个关键的目录：</p>\n<ul>\n<li><code>html</code> ：放置一些静态资源</li>\n<li><code>conf</code> ：放置配置文件</li>\n</ul>\n<p>如果我们要让 Nginx 代理我们的静态资源，最好是放到 <code>html</code>  目录；如果我们要修改 Nginx 的配置，最好是找到 <code>conf</code>  下的 <code>nginx.conf</code>  文件。</p>\n<p>但遗憾的是，容器运行的 Nginx 所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404071856386.png\" alt=\"\" /></p>\n<p>在上图中：</p>\n<ul>\n<li>我们创建了两个数据卷： <code>conf</code> 、 <code>html</code></li>\n<li>Nginx 容器内部的 <code>conf</code>  目录和 <code>html</code>  目录分别与两个数据卷关联。</li>\n<li>而数据卷 conf 和 html 分别指向了宿主机的 <code>/var/lib/docker/volumes/conf/_data</code>  目录和 <code>/var/lib/docker/volumes/html/_data</code>  目录</li>\n</ul>\n<p>这样以来，容器内的 <code>conf</code>  和 <code>html</code>  目录就 与宿主机的 <code>conf</code>  和 <code>html</code>  目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的 <code>/var/lib/docker/volumes/html/_data</code>  就是在操作容器内的 <code>/usr/share/nginx/html/_data</code>  目录。只要我们将静态资源放入宿主机对应目录，就可以被 Nginx 代理了。</p>\n<div class=\"note warning no-icon\">\n<p>💡<strong>小提示</strong>：</p>\n<p>​\t <code>/var/lib/docker/volumes</code>  这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为 <code>/数据卷名/_data</code> 。</p>\n<p>​\t<strong>为什么不让容器目录直接指向宿主机目录呢</strong>？</p>\n<ul>\n<li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li>\n<li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li>\n</ul>\n<p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与宿主机目录挂载而不使用数据卷</strong>，具体参考 2.2.3 小节。</p>\n</div>\n<h4 id=\"数据卷命令\"><a class=\"anchor\" href=\"#数据卷命令\">#</a> 数据卷命令</h4>\n<p>数据卷的相关命令有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>命令</strong></th>\n<th style=\"text-align:center\"><strong>说明</strong></th>\n<th style=\"text-align:center\"><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">docker volume create</td>\n<td style=\"text-align:center\">创建数据卷</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfY3JlYXRlLw==\">docker volume create</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker volume ls</td>\n<td style=\"text-align:center\">查看所有数据卷</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfbHMv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker volume rm</td>\n<td style=\"text-align:center\">删除指定数据卷</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfcHJ1bmUv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker volume inspect</td>\n<td style=\"text-align:center\">查看某个数据卷的详情</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfaW5zcGVjdC8=\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker volume prune</td>\n<td style=\"text-align:center\">清除数据卷</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS92b2x1bWVfcHJ1bmUv\">docker volume prune</span></td>\n</tr>\n</tbody>\n</table>\n<p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p>\n<p>演示一下 nginx 的 html 目录挂载</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#（可选）删除容器内若有 nginx 则要先删除，否则会冲突</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker <span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 1. 首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#在执行 docker run 命令时，使用 - v 数据卷：容器内目录可完成数据卷挂载</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">--</span>name nginx <span class=\"token operator\">-</span>p 80:80 <span class=\"token operator\">-</span>v html:<span class=\"token operator\">/</span>usr/share/nginx/html nginx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2. 然后查看数据卷</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>docker volume <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DRIVER    VOLUME NAME</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>local     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>local     html</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 3. 查看数据卷详情</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>docker volume inspect html</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"CreatedAt\"</span>: <span class=\"token string\">\"2024-05-17T19:57:08+08:00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"Driver\"</span>: <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"Labels\"</span>: null<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"Mountpoint\"</span>: <span class=\"token string\">\"/var/lib/docker/volumes/html/_data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"Name\"</span>: <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"Options\"</span>: null<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token string\">\"Scope\"</span>: <span class=\"token string\">\"local\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 4. 查看 /var/lib/docker/volumes/html/_data 目录</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>ll <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib/docker/volumes/html/_data</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 可以看到与 nginx 的 html 目录内容一样，结果如下：</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>总用量 8</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">-</span>rw-r-<span class=\"token operator\">-</span>r-<span class=\"token operator\">-</span><span class=\"token punctuation\">.</span> 1 root root 497 12月 28 2021 50x<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">-</span>rw-r-<span class=\"token operator\">-</span>r-<span class=\"token operator\">-</span><span class=\"token punctuation\">.</span> 1 root root 615 12月 28 2021 index<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 5. 进入该目录，并随意修改 index.html 内容</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>cd <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib/docker/volumes/html/_data</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>vi index<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 6. 打开页面，查看效果</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 7. 进入容器内部，查看 /usr/share/nginx/html 目录内的文件是否变化</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>docker exec <span class=\"token operator\">-</span>it nginx bash</pre></td></tr></table></figure><p>MySQL 会自动挂载数据卷：演示一下 MySQL 的匿名数据卷</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 查看 MySQL 容器详细信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker inspect mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 关注其中.Config.Volumes 部分和.Mounts 部分</span></pre></td></tr></table></figure><p>我们关注两部分内容，第一是 <code>.Config.Volumes</code>  部分：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"Config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//... 略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"Volumes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"/var/lib/mysql\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//... 略</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p>\n<p>然后，我们再看结果中的 <code>.Mounts</code>  部分：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"Mounts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"volume\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"Destination\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/var/lib/mysql\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"Driver\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p>\n<ul>\n<li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串 hash 值。</li>\n<li>Source：宿主机目录</li>\n<li>Destination : 容器内的目录</li>\n</ul>\n<p>上述配置是将容器内的 <code>/var/lib/mysql</code>  这个目录，与数据卷 <code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>  挂载。于是在宿主机中就有了 <code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>  这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p>\n<p>接下来，可以查看该目录下的 MySQL 的 data 文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</pre></td></tr></table></figure><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考 DockerHub 对应的页面</p>\n<h4 id=\"挂载本地目录或文件\"><a class=\"anchor\" href=\"#挂载本地目录或文件\">#</a> 挂载本地目录或文件</h4>\n<p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 挂载本地目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> 本地目录:容器内目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 挂载本地文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> 本地文件:容器内文件</pre></td></tr></table></figure><div class=\"note warning\">\n<p><strong>注意</strong>：本地目录或文件必须以  <code>/</code>  或  <code>./</code>  开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p>\n</div>\n<p>例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">-v</span> mysql:/var/lib/mysql <span class=\"token comment\"># 会被识别为一个数据卷叫 mysql，运行时会自动创建这个数据卷</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> ./mysql:/var/lib/mysql <span class=\"token comment\"># 会被识别为当前目录下的 mysql 目录，运行时如果不存在会创建目录</span></pre></td></tr></table></figure><p>删除并重新创建 mysql 容器，并完成本地目录挂载：</p>\n<ul>\n<li>挂载 <code>/root/mysql/data</code>  到容器内的 <code>/var/lib/mysql</code>  目录</li>\n<li>挂载 <code>/root/mysql/init</code>  到容器内的 <code>/docker-entrypoint-initdb.d</code>  目录（初始化的 SQL 脚本目录）</li>\n<li>挂载 <code>/root/mysql/conf</code>  到容器内的 <code>/etc/mysql/conf.d</code>  目录（这个是 MySQL 配置文件目录）</li>\n</ul>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#删除 mysql</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker <span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#切换到 /root 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cd ~</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#在 /root 目录下创建 mysql 目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mkdir mysql</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#切换到 /root/mysql 目录下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cd mysql/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#创建相应的 data、conf、init 目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mkdir <span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mkdir conf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mkdir init</pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090812748.png\" alt=\"\" /></p>\n<p>接下来，本地目录挂载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 删除原来的 MySQL 容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 进入 root 目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 创建并运行新 mysql 容器，挂载本地目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> mysql <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> ./mysql/data:/var/lib/mysql <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> ./mysql/conf:/etc/mysql/conf.d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> ./mysql/init:/docker-entrypoint-initdb.d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  mysql</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 4. 查看 root 目录，可以发现～/mysql/data 目录已经自动创建好了</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> mysql</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 结果：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>总用量 <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">2</span> root    root   <span class=\"token number\">20</span> <span class=\"token number\">5</span>月  <span class=\"token number\">19</span> <span class=\"token number\">15</span>:11 conf</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">7</span> polkitd root <span class=\"token number\">4096</span> <span class=\"token number\">5</span>月  <span class=\"token number\">19</span> <span class=\"token number\">15</span>:11 data</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">2</span> root    root   <span class=\"token number\">23</span> <span class=\"token number\">5</span>月  <span class=\"token number\">19</span> <span class=\"token number\">15</span>:11 init</pre></td></tr></table></figure><p>这样即使删除 mysql 或者做升级，也不会丢失数据。</p>\n<h3 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h3>\n<p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个 Java 项目，把它打包为一个镜像该怎么做呢？</p>\n<h4 id=\"镜像结构\"><a class=\"anchor\" href=\"#镜像结构\">#</a> 镜像结构</h4>\n<p>要想自己构建镜像，必须先了解镜像的结构。</p>\n<p>镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p>\n<p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p>\n<p>举个栗子，我们要从 0 部署一个 Java 应用，大概流程是这样：</p>\n<ul>\n<li>准备一个 linux 服务（CentOS 或者 Ubuntu 均可）</li>\n<li>安装并配置 JDK</li>\n<li>上传 Jar 包</li>\n<li>运行 jar 包</li>\n</ul>\n<p>那因此，我们打包镜像也是分成这么几步：</p>\n<ul>\n<li>准备 Linux 运行环境（java 项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li>\n<li>安装并配置 JDK</li>\n<li>拷贝 jar 包</li>\n<li>配置启动脚本</li>\n</ul>\n<p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p>\n<p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 id，称为<strong> Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p>\n<p>例如，第一步中需要的 Linux 运行环境，通用性就很强，所以 Docker 官方就制作了这样的只包含 Linux 运行环境的镜像。我们在制作 java 镜像时，就无需重复制作，直接使用 Docker 官方提供的 CentOS 或 Ubuntu 镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个 Java 项目的镜像结构如图所示：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090843754.png\" alt=\"img\" /></p>\n<h4 id=\"dockerfile\"><a class=\"anchor\" href=\"#dockerfile\">#</a> Dockerfile</h4>\n<p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以 Docker 就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给 Docker 去执行即可。</p>\n<p>而这种记录镜像结构的文件就称为<strong> Dockerfile</strong>，其对应的语法可以参考官方文档：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLw==\">https://docs.docker.com/engine/reference/builder/</span></p>\n<p>其中的语法比较多，比较常用的有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>指令</strong></th>\n<th style=\"text-align:center\"><strong>说明</strong></th>\n<th style=\"text-align:center\"><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>FROM</strong></td>\n<td style=\"text-align:center\">指定基础镜像</td>\n<td style=\"text-align:center\"><code>FROM centos:6</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENV</strong></td>\n<td style=\"text-align:center\">设置环境变量，可在后面指令使用</td>\n<td style=\"text-align:center\"><code>ENV key value</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>COPY</strong></td>\n<td style=\"text-align:center\">拷贝本地文件到镜像的指定目录</td>\n<td style=\"text-align:center\"><code>COPY ./xx.jar /tmp/app.jar</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>RUN</strong></td>\n<td style=\"text-align:center\">执行 Linux 的 shell 命令，一般是安装过程的命令</td>\n<td style=\"text-align:center\"><code>RUN yum install gcc</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>EXPOSE</strong></td>\n<td style=\"text-align:center\">指定容器运行时监听的端口，是给镜像使用者看的</td>\n<td style=\"text-align:center\">EXPOSE 8080</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENTRYPOINT</strong></td>\n<td style=\"text-align:center\">镜像中应用的启动命令，容器运行时调用</td>\n<td style=\"text-align:center\">ENTRYPOINT java -jar xx.jar</td>\n</tr>\n</tbody>\n</table>\n<p>例如，要基于 Ubuntu 镜像来构建一个 Java 应用，其 Dockerfile 内容如下：</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定基础镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:16.04</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 配置环境变量，JDK 的安装目录、容器内时区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> JAVA_DIR=/usr/local</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> TZ=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 拷贝 jdk 和 java 项目的包</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./jdk8.tar.gz <span class=\"token variable\">$JAVA_DIR</span>/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./docker-demo.jar /tmp/app.jar</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 设定时区</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> ln -snf /usr/share/zoneinfo/<span class=\"token variable\">$TZ</span> /etc/localtime &amp;&amp; echo <span class=\"token variable\">$TZ</span> > /etc/timezone</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 安装 JDK</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> cd <span class=\"token variable\">$JAVA_DIR</span> <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> &amp;&amp; tar -xf ./jdk8.tar.gz <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 配置环境变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> JAVA_HOME=<span class=\"token variable\">$JAVA_DIR</span>/java8</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH=<span class=\"token variable\">$PATH</span>:<span class=\"token variable\">$JAVA_HOME</span>/bin</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 指定项目监听的端口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8080</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 入口，java 项目的启动命令</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"java\"</span>, <span class=\"token string\">\"-jar\"</span>, <span class=\"token string\">\"/app.jar\"</span>]</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p>思考一下：以后我们会有很多很多 java 项目需要打包为镜像，他们都需要 Linux 系统环境、JDK 环境这两层，只有上面的 3 层不同（因为 jar 包不同）。如果每次制作 java 镜像都重复制作前两层镜像，是不是很麻烦。</p>\n</div>\n<p>所以，就有人提供了基础的系统加 JDK 环境，我们在此基础上制作 java 镜像，就可以省去 JDK 的配置了：</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 基础镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> openjdk:11.0-jre-buster</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 设定时区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> TZ=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> ln -snf /usr/share/zoneinfo/<span class=\"token variable\">$TZ</span> /etc/localtime &amp;&amp; echo <span class=\"token variable\">$TZ</span> > /etc/timezone</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 拷贝 jar 包</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> docker-demo.jar /app.jar</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 入口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"java\"</span>, <span class=\"token string\">\"-jar\"</span>, <span class=\"token string\">\"/app.jar\"</span>]</span></pre></td></tr></table></figure><p>是不是简单多了。</p>\n<h4 id=\"构建镜像\"><a class=\"anchor\" href=\"#构建镜像\">#</a> 构建镜像</h4>\n<p>当 Dockerfile 文件写好以后，就可以利用命令来构建镜像了。</p>\n<p>我们准备好一个 demo 项目及对应的 Dockerfile：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090851642.png\" alt=\"img\" /></p>\n<p>Dockerfile 中的样子：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090859210.png\" alt=\"image-20240409085911148\" /></p>\n<p>首先，我们将 <code>docker-demo.jar</code>  包以及 <code>Dockerfile</code>  拷贝到虚拟机的 <code>/root/demo</code>  目录：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090856731.png\" alt=\"img\" /></p>\n<p>然后，执行命令，构建镜像：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入镜像目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root/demo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 开始构建</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> docker-demo:1.0 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>命令说明：</p>\n<ul>\n<li><code>docker build </code> : 就是构建一个 docker 镜像</li>\n<li><code>-t docker-demo:1.0</code>  ： <code>-t</code>  参数是指定镜像的名称（ <code>repository</code>  和 <code>tag</code> ）</li>\n<li><code>.</code>  : 最后的点是指构建时 Dockerfile 所在路径，由于我们进入了 demo 目录，所以指定的是 <code>.</code>  代表当前目录，也可以直接指定 Dockerfile 目录：\n<ul>\n<li>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 直接指定 Dockerfile 目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> docker-demo:1.0 /root/demo</pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>结果：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404090905035.png\" alt=\"image-20240409090510979\" /></p>\n<p>查看镜像列表：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看镜像列表：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker-demo   <span class=\"token number\">1.0</span>       d6ab0b9e64b9   <span class=\"token number\">27</span> minutes ago   327MB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nginx         latest    605c77e624dd   <span class=\"token number\">16</span> months ago    141MB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mysql         latest    3218b38490ce   <span class=\"token number\">17</span> months ago    516MB</pre></td></tr></table></figure><p>然后尝试运行该镜像：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 创建并运行容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> <span class=\"token function\">dd</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 docker-demo:1.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 2. 查看容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dps</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>78a000447b49   docker-demo:1.0   <span class=\"token number\">0.0</span>.0.0:8080-<span class=\"token operator\">></span><span class=\"token number\">8080</span>/tcp, :::8090-<span class=\"token operator\">></span><span class=\"token number\">8090</span>/tcp              Up <span class=\"token number\">2</span> seconds   <span class=\"token function\">dd</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f63cfead8502   mysql             <span class=\"token number\">0.0</span>.0.0:3306-<span class=\"token operator\">></span><span class=\"token number\">3306</span>/tcp, :::3306-<span class=\"token operator\">></span><span class=\"token number\">3306</span>/tcp, <span class=\"token number\">33060</span>/tcp   Up <span class=\"token number\">2</span> hours     mysql</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 3. 访问</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">curl</span> localhost:8080/hello/count</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 结果：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>></span>欢迎访问黑马商城, 这是您第1次访问<span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>></span></pre></td></tr></table></figure><h3 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h3>\n<p>我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>\n<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 用基本命令，寻找 Networks.bridge.IPAddress 属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> inspect mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 也可以使用 format 过滤结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼6--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 得到 IP 地址如下：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">172.17</span>.0.2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2. 然后通过命令进入 dd 容器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token function\">dd</span> <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3. 在容器内，通过 ping 命令测试网络</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token number\">172.17</span>.0.2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PING <span class=\"token number\">172.17</span>.0.2 <span class=\"token punctuation\">(</span><span class=\"token number\">172.17</span>.0.2<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">172.17</span>.0.2: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.053</span> ms</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">172.17</span>.0.2: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.059</span> ms</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">172.17</span>.0.2: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.058</span> ms</pre></td></tr></table></figure><p>发现可以互联，没有问题。</p>\n<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器因为启动次序的变化导致其 IP 发生变化，连接会失败。</p>\n<p>所以，我们必须借助于 docker 的网络功能来解决这个问题，官方文档：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrLw==\">https://docs.docker.com/engine/reference/commandline/network/</span></p>\n<p>常见命令有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>命令</strong></th>\n<th style=\"text-align:center\"><strong>说明</strong></th>\n<th style=\"text-align:center\"><strong>文档地址</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">docker network create</td>\n<td style=\"text-align:center\">创建一个网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2NyZWF0ZS8=\">docker network create</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network ls</td>\n<td style=\"text-align:center\">查看所有网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2xzLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network rm</td>\n<td style=\"text-align:center\">删除指定网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX3JtLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network prune</td>\n<td style=\"text-align:center\">清除未使用的网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX3BydW5lLw==\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network connect</td>\n<td style=\"text-align:center\">使指定容器连接加入某网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2Nvbm5lY3Qv\">docs.docker.com</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network disconnect</td>\n<td style=\"text-align:center\">使指定容器连接离开某网络</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2Rpc2Nvbm5lY3Qv\">docker network disconnect</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker network inspect</td>\n<td style=\"text-align:center\">查看网络详细信息</td>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9uZXR3b3JrX2luc3BlY3Qv\">docker network inspect</span></td>\n</tr>\n</tbody>\n</table>\n<p>学习使用 “自定义网络 “</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 首先通过命令创建一个网络</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> network create hmall</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 然后查看网络</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> network <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 结果：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>NETWORK ID     NAME      DRIVER    SCOPE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>639bc44d0a87   bridge    bridge    <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>403f16ec62a2   hmall     bridge    <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>0dc0f72a0fbb   <span class=\"token function\">host</span>      <span class=\"token function\">host</span>      <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cd8d3e8df47b   none      null      <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 其中，除了 hmall 以外，其它都是默认的网络</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 3. 让 dd 和 mysql 都加入该网络，注意，在加入网络时可以通过 --alias 给容器起别名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 这样该网络内的其它容器可以用别名互相访问！</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 3.1.mysql 容器，指定别名为 db，另外每一个容器都有一个别名是容器名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">docker</span> network connect hmall mysql <span class=\"token parameter variable\">--alias</span> db</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 3.2.db 容器，也就是我们的 java 项目</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">docker</span> network connect hmall <span class=\"token function\">dd</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 4. 进入 dd 容器，尝试利用别名访问 db</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 4.1. 进入容器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token function\">dd</span> <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 4.2. 用 db 别名访问</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">ping</span> db</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>PING db <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">64</span> bytes from mysql.hmall <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.070</span> ms</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">64</span> bytes from mysql.hmall <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.056</span> ms</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 4.3. 用容器名访问</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">ping</span> mysql</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 结果：</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PING mysql <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">64</span> bytes from mysql.hmall <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.044</span> ms</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">64</span> bytes from mysql.hmall <span class=\"token punctuation\">(</span><span class=\"token number\">172.18</span>.0.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.054</span> ms</pre></td></tr></table></figure><p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>\n<li>加入自定义网络的容器才可以通过容器名互相访问</li>\n</ul>\n",
            "tags": [
                "笔记",
                "后端,Docker"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/Docker%E5%AE%89%E8%A3%85/",
            "url": "https://ruler64.github.io/hexo/Docker%E5%AE%89%E8%A3%85/",
            "title": "Docker的安装",
            "date_published": "2024-04-07T00:32:44.000Z",
            "content_html": "<div class=\"note info\">\n<p>Docker 的安装在 Linux CentOS 7 中为例</p>\n</div>\n<h1 id=\"卸载旧版\"><a class=\"anchor\" href=\"#卸载旧版\">#</a> 卸载旧版</h1>\n<p>首先如果系统中已经存在旧的 Docker，则先卸载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    docker-engine</pre></td></tr></table></figure><h1 id=\"配置docker的yum库\"><a class=\"anchor\" href=\"#配置docker的yum库\">#</a> 配置 Docker 的 yum 库</h1>\n<p>首先要安装一个 yum 工具</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils</pre></td></tr></table></figure><p>安装成功后，执行命令，配置 Docker 的 yum 源：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#添加软件源信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</pre></td></tr></table></figure><h1 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 Docker</h1>\n<p>最后，执行命令，安装 Docker</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</pre></td></tr></table></figure><h1 id=\"启动和校验\"><a class=\"anchor\" href=\"#启动和校验\">#</a> 启动和校验</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 Docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 停止 Docker</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>systemctl stop <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl restart <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 设置开机自启</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 执行 docker ps 命令，如果不报错，说明安装启动成功</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></pre></td></tr></table></figure><h1 id=\"配置镜像加速\"><a class=\"anchor\" href=\"#配置镜像加速\">#</a> 配置镜像加速</h1>\n<p>这里以阿里云镜像加速为例。</p>\n<h2 id=\"注册阿里云账号\"><a class=\"anchor\" href=\"#注册阿里云账号\">#</a> 注册阿里云账号</h2>\n<p>首先访问阿里云网站:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=\">https://www.aliyun.com/</span></p>\n<p>注册一个账号。</p>\n<h2 id=\"开通镜像服务\"><a class=\"anchor\" href=\"#开通镜像服务\">#</a> 开通镜像服务</h2>\n<p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong>:</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404070844103.png\" alt=\"\" /></p>\n<p>点击后进入控制台：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404070845936.png\" alt=\"\" /></p>\n<p>首次可能需要选择立刻开通，然后进入控制台。</p>\n<h2 id=\"配置镜像加速-2\"><a class=\"anchor\" href=\"#配置镜像加速-2\">#</a> 配置镜像加速</h2>\n<p>找到<strong>镜像工具</strong>下的<strong>镜像加速器</strong>：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404070847709.png\" alt=\"\" /></p>\n<p>页面向下滚动，即可找到配置的文档说明：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404070848134.png\" alt=\"\" /></p>\n<p>具体命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/docker</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \"registry-mirrors\": [\"https://xxxx.mirror.aliyuncs.com\"]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 重新加载配置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 重启 Docker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><h1 id=\"docker原理\"><a class=\"anchor\" href=\"#docker原理\">#</a> Docker 原理</h1>\n<p><span class=\"red\">镜像和容器</span></p>\n<p>当我们利用 Docker 安装应用时，Docker 会自动搜索并下载应用<strong>镜像（image）</strong>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker 会在运行镜像时创建一个隔离环境，称为<strong>容器（container）</strong>。</p>\n<p><strong>镜像仓库</strong>：存储和管理镜像的平台，Docker 官方维护了一个公共仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">Docker Hub</span>。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/ruler64/picture/picture/202404070932177.png\" alt=\"\" /></p>\n",
            "tags": [
                "笔记",
                "后端,Docker"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/SpringBoot-MybatisPlus-page/",
            "url": "https://ruler64.github.io/hexo/SpringBoot-MybatisPlus-page/",
            "title": "MybatisPlus之分页查询",
            "date_published": "2022-10-18T07:53:53.000Z",
            "content_html": "<p>代码基于 maven 管理和 mysql 数据库与 SpringBoot 框架</p>\n<ol>\n<li>\n<p>首先在根目录下创建 config 目录作为 SpringBoot 配置的目录，新建 class 类 MybatisPlusConfig，代码如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token comment\">// 使其可以被发现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token comment\">// 交给 spring 管理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> mybatisPlusInterceptor<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        mybatisPlusInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> mybatisPlusInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>同理创建 controller 目录，新建类名为 EmployeeController，代码如下</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 员工信息分页查询</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param page</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param pageSize</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pageSize<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 构造分页构造器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Page</span> pageInfo<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 构造条件构造器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 添加过滤条件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 添加排序条件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getUpdateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 执行查询</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>pageInfo<span class=\"token punctuation\">,</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>pageInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中 <code>R</code>  类型是响应前端的进一步封装类，基础类名为 <code>Employee</code>  其各自代码如下</p>\n<p><code>R</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 通用返回结果，服务端响应的数据最终都会封装成此对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &lt;T></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编码：1 成功，0 和其它数字为失败</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        r<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        r<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">R</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        r<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        r<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Employee</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span><span class=\"token comment\">// 基于 lombok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> idNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> updateTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSERT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> createUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSERT_UPDATE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> updateUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "项目",
                "后端,springBoot,Mp"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/SpringMvc-Rest/",
            "url": "https://ruler64.github.io/hexo/SpringMvc-Rest/",
            "title": "深入SpringMvc学习之路（一）Rest风格开发",
            "date_published": "2022-10-10T03:36:44.000Z",
            "content_html": "<p>理解 Rest 是什么，Rest 的优缺点，以及 Rest 的四个动作（增、删、查、改）的格式，</p>\n<h1 id=\"rest是什么\"><a class=\"anchor\" href=\"#rest是什么\">#</a> Rest 是什么</h1>\n<p>表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。需要注意的是，REST 是设计风格而不是标准。REST 通常基于使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9IVFRQP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\"> HTTP</span>，URI，和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9YTUw/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\"> XML</span>（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQTAlODclRTUlODclODYlRTklODAlOUElRTclOTQlQTglRTYlQTAlODclRTglQUUlQjAlRTglQUYlQUQlRTglQTglODA/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">标准通用标记语言</span>下的一个子集）以及<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9IVE1MP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\"> HTML</span>（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。</p>\n<h1 id=\"rest风格描述形式的优点\"><a class=\"anchor\" href=\"#rest风格描述形式的优点\">#</a> Rest 风格描述形式的优点</h1>\n<p><img data-src=\"%E7%AE%80%E4%BB%8B.png\" alt=\"简介\" /></p>\n<p>明显看到，传统风格对于访问资源的行为并无隐藏，同时，其格式相较 Rest 来说更加的复杂，杂乱而不统一。</p>\n<h1 id=\"rest的四个动作格式\"><a class=\"anchor\" href=\"#rest的四个动作格式\">#</a> Rest 的四个动作格式</h1>\n<p><img data-src=\"%E6%A0%BC%E5%BC%8F.png\" alt=\"格式\" /></p>\n<h1 id=\"rest入门案例\"><a class=\"anchor\" href=\"#rest入门案例\">#</a> Rest 入门案例</h1>\n<h2 id=\"初始注解开发\"><a class=\"anchor\" href=\"#初始注解开发\">#</a> 初始注解开发</h2>\n<p>举个栗子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span>配置在类上可以简化配置，表示设置当前每个方法的返回值都作为响应体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//@RestController     // 使用 @RestController 注解替换 @Controller 与 @ResponseBody 注解，简化书写</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/&#123;id&#125;\"</span> <span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    @DeleteMapping (\"/&#123;id&#125;\")     // 使用 @DeleteMapping 简化 DELETE 请求方法对应的映射配置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//    @PutMapping         // 使用 @PutMapping 简化 Put 请求方法对应的映射配置</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book update...\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/&#123;id&#125;\"</span> <span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//    @GetMapping (\"/&#123;id&#125;\")    // 使用 @GetMapping 简化 GET 请求方法对应的映射配置</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getById...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//    @GetMapping             // 使用 @GetMapping 简化 GET 请求方法对应的映射配置</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"优化注解开发\"><a class=\"anchor\" href=\"#优化注解开发\">#</a> 优化注解开发</h2>\n<p><code> @RestController</code>  注解包含了 <code>@Controller</code>  与 <code>@ResponseBody</code>  注解，实现简化书写</p>\n<h3 id=\"requestmapping优化\"><a class=\"anchor\" href=\"#requestmapping优化\">#</a> @RequestMapping 优化</h3>\n<ol>\n<li>\n<p>增 <code>@RequestMapping( method = RequestMethod.POST)</code> =&gt; <code>@PostMapping</code></p>\n</li>\n<li>\n<p>删 <code>@RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.DELETE)</code> =&gt; <code>@DeleteMapping(&quot;/&#123;id&#125;&quot;)</code></p>\n</li>\n<li>\n<p>改 <code>@RequestMapping(method = RequestMethod.PUT)</code> =&gt; <code>@PutMapping</code></p>\n</li>\n<li>\n<p>查 <code>@RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.GET)</code> =&gt; <code>@GetMapping(&quot;/&#123;id&#125;&quot;)</code></p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 标准 REST 风格控制器开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book save...\"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book delete...\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book update...\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book update'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getById...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getById'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book getAll...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'book getAll'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"注解理解\"><a class=\"anchor\" href=\"#注解理解\">#</a> 注解理解</h2>\n<h3 id=\"pathvariable\"><a class=\"anchor\" href=\"#pathvariable\">#</a> PathVariable</h3>\n<p><img data-src=\"PathVariable.png\" alt=\"PathVariable\" /></p>\n<h3 id=\"注解选择\"><a class=\"anchor\" href=\"#注解选择\">#</a> 注解选择</h3>\n<p><img data-src=\"%E5%8F%82%E6%95%B0.png\" alt=\"参数\" title=\"注解选择\" /></p>\n",
            "tags": [
                "笔记",
                "后端,SpringMvc"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/thread-lock/",
            "url": "https://ruler64.github.io/hexo/thread-lock/",
            "title": "线程安全问题",
            "date_published": "2022-10-09T03:36:44.000Z",
            "content_html": "<h1 id=\"关于线程安全问题\"><a class=\"anchor\" href=\"#关于线程安全问题\">#</a> 关于线程安全问题</h1>\n<p>ctrl+alt+t 第九个 synchronized (this): 给核心操作 (判断银行钱够不够) 上锁。同时也可以用 Lock 类来创建一个自己的锁但是因为 Lock 为接口，不能有实体类所以用 private final Lock lock = new ReentrantLock (); 然后在需要上锁的地方前加入 lock.lock (); 但是在此方法结束时要加入 try 来抛出方法可能会出现的异常最后加入 finally 然后在 finally {lock.unlock ();}// 解锁</p>\n",
            "tags": [
                "笔记",
                "后端,thread"
            ]
        },
        {
            "id": "https://ruler64.github.io/hexo/hexo-url-optimization/",
            "url": "https://ruler64.github.io/hexo/hexo-url-optimization/",
            "title": "Hexo博客url优化",
            "date_published": "2022-10-02T13:35:48.000Z",
            "content_html": "<h1 id=\"关于hexo博客url的优化\"><a class=\"anchor\" href=\"#关于hexo博客url的优化\">#</a> 关于 hexo 博客 url 的优化</h1>\n<p>关于 hexo 博客 url 的优化，建议看: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1c2l4aWFuL2Nvc19ibG9ncy9ibG9iL21haW4vc291cmNlL19wb3N0cy90b29scy9IZXhvJUU1JThEJTlBJUU1JUFFJUEydXJsJUU0JUJDJTk4JUU1JThDJTk2Lm1k\">Hexo 博客 url 优化</span></p>\n",
            "tags": [
                "工具",
                "前端,hexo"
            ]
        }
    ]
}